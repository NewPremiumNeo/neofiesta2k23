<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Voted</title>
</head>
<style>
    body{
        overflow-y: hidden;
    }
    .funds-success-message-container {
        font-family: Roboto, "Segoe UI", "Helvetica Neue", sans-serif !important;
        color: #f0e9e9;
        margin-top: 10rem;
        max-width: 500px;
        margin: 0 auto;
        position: relative;
    }

    .funds-checkmark-text-container {
        display: block;
        width: auto !important;
        max-width: 500px;
        margin: 0 auto;
        text-align: center;
    }

    .funds-checkmark-container {
        height: 40px;
        padding: 0 4px 0 0px;
        display: inline-block;
        width: 70px;
        margin: 0 auto;
    }

    .funds-checkmark-container:after {
        clear: both;
    }

    .funds-success-done-text {
        vertical-align: middle;
        margin: 0;
        padding: 15px 0 0 0;
        display: inline;
    }

    .funds-success-message {
        text-align: center;
        margin-top: 2em;
    }

    .funds-success-message h2 {
        margin-top: 0px;
    }

    h1,
    h2 {
        font-weight: 700;
        margin-top: 0px;
    }

    h1 {
        font-size: 28pt;
        margin-top: 45px;
    }

    h2 {
        font-size: 18pt;
        margin-top: 25px;
    }

    p {
        font-size: 12pt;
        padding-bottom: 1em;
        line-height: 27.2px;
    }

    /* CHECKMARK */
    .funds-checkmark-circle {
        stroke-dasharray: 166;
        stroke-dashoffset: 166;
        stroke-width: 5;
        stroke-miterlimit: 10;
        stroke: #33bb11;
        fill: none;
        -webkit-animation: stroke 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards;
        animation: stroke 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards;
    }

    .funds-checkmark {
        width: 56px;
        height: 56px;
        border-radius: 50%;
        display: block;
        stroke-width: 5;
        stroke: #ffffff;
        stroke-miterlimit: 10;
        margin: 10% auto;
        -webkit-box-shadow: inset 0px 0px 0px #33bb11;
        box-shadow: inset 0px 0px 0px #33bb11;
        -webkit-animation: fill 0.4s ease-in-out 0.4s forwards,
            scale 0.3s ease-in-out 0.9s both;
        animation: fill 0.4s ease-in-out 0.4s forwards,
            scale 0.3s ease-in-out 0.9s both;
    }

    .funds-checkmark-check {
        -webkit-transform-origin: 50% 50%;
        -ms-transform-origin: 50% 50%;
        transform-origin: 50% 50%;
        stroke-dasharray: 48;
        stroke-dashoffset: 48;
        -webkit-animation: stroke 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.8s forwards;
        animation: stroke 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.8s forwards;
    }

    .funds-display-on-ie {
        display: none;
    }

    .dp {
        border: 2px solid #ddd;
        padding: 2px;
        border-radius: 50%;
        width: 7rem;
        height: 7rem;
    }

    @media screen and (-ms-high-contrast: active),
    (-ms-high-contrast: none) {
        .funds-display-on-ie {
            display: block;
        }

        .funds-checkmark {
            display: none;
        }

        .funds-ie-checkmark-circle {
            stroke-dasharray: 166;
            stroke-dashoffset: 166;
            stroke-width: 5;
            stroke-miterlimit: 10;
            stroke: #33bb11;
            fill: none;
            -webkit-animation: stroke 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards;
            animation: stroke 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards;
        }

        .funds-ie-checkmark {
            width: 56px;
            height: 56px;
            border-radius: 50%;
            display: block;
            stroke-width: 5;
            stroke: #ffffff;
            stroke-miterlimit: 10;
            margin: 10% auto;
            -webkit-box-shadow: inset 0px 0px 0px #33bb11;
            box-shadow: inset 0px 0px 0px #33bb11;
            -webkit-animation: fill 0.4s ease-in-out 0.4s forwards,
                scale 0.3s ease-in-out 0.9s both;
            animation: fill 0.4s ease-in-out 0.4s forwards,
                scale 0.3s ease-in-out 0.9s both;
        }

        .funds-ie-checkmark-check {
            -webkit-transform-origin: 50% 50%;
            -ms-transform-origin: 50% 50%;
            transform-origin: 50% 50%;
            -webkit-animation: stroke 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.8s forwards;
            animation: stroke 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.8s forwards;
        }
    }

    @-webkit-keyframes stroke {
        100% {
            stroke-dashoffset: 0;
        }
    }

    @keyframes stroke {
        100% {
            stroke-dashoffset: 0;
        }
    }

    @-webkit-keyframes scale {

        0%,
        100% {
            -webkit-transform: none;
            transform: none;
        }

        50% {
            -webkit-transform: scale3d(1.1, 1.1, 1);
            transform: scale3d(1.1, 1.1, 1);
        }
    }

    @keyframes scale {

        0%,
        100% {
            -webkit-transform: none;
            transform: none;
        }

        50% {
            -webkit-transform: scale3d(1.1, 1.1, 1);
            transform: scale3d(1.1, 1.1, 1);
        }
    }

    @-webkit-keyframes fill {
        100% {
            -webkit-box-shadow: inset 0px 0px 0px 30px #33bb11;
            box-shadow: inset 0px 0px 0px 30px #33bb11;
        }
    }

    @keyframes fill {
        100% {
            -webkit-box-shadow: inset 0px 0px 0px 30px #33bb11;
            box-shadow: inset 0px 0px 0px 30px #33bb11;
        }
    }

    @media only screen and (max-width: 768px) {
        .funds-checkmark-text-container {
            display: block;
        }

        .funds-checkmark-container {
            height: auto;
            padding: 0;
            display: block;
            width: 100%;
        }
    }

    canvas {
        position: absolute;
        top: 0;
        left: 0;
        background-color: #111;
    }
</style>

<body>
    <canvas id=c></canvas>
    <div class="funds-success-message-container">
        <div class="funds-checkmark-text-container">
            <div class="funds-checkmark-container">
                <svg class="funds-checkmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52">
                    <circle class="funds-checkmark-circle" cx="26" cy="26" r="25" fill="none" />
                    <path class="funds-checkmark-check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8" />
                </svg>

                <div class="funds-display-on-ie">
                    <svg class="funds-ie-checkmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52">
                        <circle class="funds-ie-checkmark-circle" cx="26" cy="26" r="25" fill="none" />
                        <path class="funds-ie-checkmark-check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8" />
                    </svg>
                </div>
            </div>

            <h1 class="funds-success-done-text">Voted!</h1>
        </div>


        <div class="funds-success-message">
            <h2>We think you made the right choice.</h2>
            <h3>You have voted <%= votedMemberId.name %> having ID- <%= parseInt(votedMemberId.votedMember.slice(-2)) %>
            </h3>
            <img class="dp" src="/images/freshers/<%= votedMemberId.votedMember %>.png" alt="">
        </div>

    </div>
</body>
<script>
    var gl = c.getContext('webgl', { preserveDrawingBuffer: true })
        , w = c.width = window.innerWidth
        , h = c.height = window.innerHeight

        , webgl = {}
        , opts = {
            projectileAlpha: .8,
            projectileLineWidth: 1.3,
            fireworkAngleSpan: .5,
            baseFireworkVel: 3,
            addedFireworkVel: 3,
            gravity: .03,
            lowVelBoundary: -.2,
            xFriction: .995,
            baseShardVel: 1,
            addedShardVel: .2,
            fireworks: 1000,
            baseShardsParFirework: 10,
            addedShardsParFirework: 10,
            shardFireworkVelMultiplier: .3,
            initHueMultiplier: 1 / 360,
            runHueAdder: .1 / 360
        }

    webgl.vertexShaderSource = `
uniform int u_mode;
uniform vec2 u_res;
attribute vec4 a_data;
varying vec4 v_color;

vec3 h2rgb( float h ){
	return clamp( abs( mod( h * 6. + vec3( 0, 4, 2 ), 6. ) - 3. ) -1., 0., 1. );
}
void clear(){
	gl_Position = vec4( a_data.xy, 0, 1 );
	v_color = vec4( 0, 0, 0, a_data.w );
}
void draw(){
	gl_Position = vec4( vec2( 1, -1 ) * ( ( a_data.xy / u_res ) * 2. - 1. ), 0, 1 );
	v_color = vec4( h2rgb( a_data.z ), a_data.w );
}
void main(){
	if( u_mode == 0 )
		draw();
	else
		clear();
}
`;
    webgl.fragmentShaderSource = `
precision mediump float;
varying vec4 v_color;

void main(){
	gl_FragColor = v_color;
}
`;

    webgl.vertexShader = gl.createShader(gl.VERTEX_SHADER);
    gl.shaderSource(webgl.vertexShader, webgl.vertexShaderSource);
    gl.compileShader(webgl.vertexShader);

    webgl.fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
    gl.shaderSource(webgl.fragmentShader, webgl.fragmentShaderSource);
    gl.compileShader(webgl.fragmentShader);

    webgl.shaderProgram = gl.createProgram();
    gl.attachShader(webgl.shaderProgram, webgl.vertexShader);
    gl.attachShader(webgl.shaderProgram, webgl.fragmentShader);

    gl.linkProgram(webgl.shaderProgram);
    gl.useProgram(webgl.shaderProgram);

    webgl.dataAttribLoc = gl.getAttribLocation(webgl.shaderProgram, 'a_data');
    webgl.dataBuffer = gl.createBuffer();

    gl.enableVertexAttribArray(webgl.dataAttribLoc);
    gl.bindBuffer(gl.ARRAY_BUFFER, webgl.dataBuffer);
    gl.vertexAttribPointer(webgl.dataAttribLoc, 4, gl.FLOAT, false, 0, 0);

    webgl.resUniformLoc = gl.getUniformLocation(webgl.shaderProgram, 'u_res');
    webgl.modeUniformLoc = gl.getUniformLocation(webgl.shaderProgram, 'u_mode');

    gl.viewport(0, 0, w, h);
    gl.uniform2f(webgl.resUniformLoc, w, h);

    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
    gl.enable(gl.BLEND);

    gl.lineWidth(opts.projectileLineWidth);

    webgl.data = [];

    webgl.clear = function () {

        gl.uniform1i(webgl.modeUniformLoc, 1);
        var a = .1;
        webgl.data = [
            -1, -1, 0, a,
            1, -1, 0, a,
            -1, 1, 0, a,
            -1, 1, 0, a,
            1, -1, 0, a,
            1, 1, 0, a
        ];
        webgl.draw(gl.TRIANGLES);
        gl.uniform1i(webgl.modeUniformLoc, 0);
        webgl.data.length = 0;
    }
    webgl.draw = function (glType) {

        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(webgl.data), gl.STATIC_DRAW);
        gl.drawArrays(glType, 0, webgl.data.length / 4);
    }

    var fireworks = []
        , tick = 0
        , sins = []
        , coss = []
        , maxShardsParFirework = opts.baseShardsParFirework + opts.addedShardsParFirework
        , tau = 6.283185307179586476925286766559;

    for (var i = 0; i < maxShardsParFirework; ++i) {
        sins[i] = Math.sin(tau * i / maxShardsParFirework);
        coss[i] = Math.cos(tau * i / maxShardsParFirework);
    }

    function Firework() {
        this.reset();
        this.shards = [];
        for (var i = 0; i < maxShardsParFirework; ++i)
            this.shards.push(new Shard(this));
    }
    Firework.prototype.reset = function () {

        var angle = -Math.PI / 2 + (Math.random() - .5) * opts.fireworkAngleSpan
            , vel = opts.baseFireworkVel + opts.addedFireworkVel * Math.random();

        this.mode = 0;
        this.vx = vel * Math.cos(angle);
        this.vy = vel * Math.sin(angle);

        this.x = Math.random() * w;
        this.y = h;

        this.hue = tick * opts.initHueMultiplier;

    }
    Firework.prototype.step = function () {

        if (this.mode === 0) {

            var ph = this.hue
                , px = this.x
                , py = this.y;

            this.hue += opts.runHueAdder;

            this.x += this.vx *= opts.xFriction;
            this.y += this.vy += opts.gravity;

            webgl.data.push(
                px, py, ph, opts.projectileAlpha * .2,
                this.x, this.y, this.hue, opts.projectileAlpha * .2);

            if (this.vy >= opts.lowVelBoundary) {
                this.mode = 1;

                this.shardAmount = opts.baseShardsParFirework + opts.addedShardsParFirework * Math.random() | 0;

                var baseAngle = Math.random() * tau
                    , x = Math.cos(baseAngle)
                    , y = Math.sin(baseAngle)
                    , sin = sins[this.shardAmount]
                    , cos = coss[this.shardAmount];

                for (var i = 0; i < this.shardAmount; ++i) {

                    var vel = opts.baseShardVel + opts.addedShardVel * Math.random();
                    this.shards[i].reset(x * vel, y * vel)
                    var X = x;
                    x = x * cos - y * sin;
                    y = y * cos + X * sin;
                }
            }

        } else if (this.mode === 1) {

            this.ph = this.hue
            this.hue += opts.runHueAdder;

            var allDead = true;
            for (var i = 0; i < this.shardAmount; ++i) {
                var shard = this.shards[i];
                if (!shard.dead) {
                    shard.step();
                    allDead = false;
                }
            }

            if (allDead)
                this.reset();
        }

    }
    function Shard(parent) {
        this.parent = parent;
    }
    Shard.prototype.reset = function (vx, vy) {
        this.x = this.parent.x;
        this.y = this.parent.y;
        this.vx = this.parent.vx * opts.shardFireworkVelMultiplier + vx;
        this.vy = this.parent.vy * opts.shardFireworkVelMultiplier + vy;
        this.starty = this.y;
        this.dead = false;
        this.tick = 1;
    }
    Shard.prototype.step = function () {

        this.tick += .05;

        var px = this.x
            , py = this.y;

        this.x += this.vx *= opts.xFriction;
        this.y += this.vy += opts.gravity;

        var proportion = 1 - (this.y - this.starty) / (h - this.starty);

        webgl.data.push(
            px, py, this.parent.ph, opts.projectileAlpha / this.tick,
            this.x, this.y, this.parent.hue, opts.projectileAlpha / this.tick);

        if (this.y > h)
            this.dead = true;
    }

    function anim() {

        window.requestAnimationFrame(anim)

        webgl.clear();

        ++tick;

        if (fireworks.length < opts.fireworks)
            fireworks.push(new Firework);

        fireworks.map(function (firework) { firework.step(); });

        webgl.draw(gl.LINES);
    }
    anim();

    window.addEventListener('resize', function () {

        w = c.width = window.innerWidth;
        h = c.height = window.innerHeight;

        gl.viewport(0, 0, w, h);
        gl.uniform2f(webgl.resUniformLoc, w, h);
    })
    window.addEventListener('click', function (e) {
        var firework = new Firework();
        firework.x = e.clientX;
        firework.y = e.clientY;
        firework.vx = 0;
        firework.vy = 0;
        fireworks.push(firework);
    });
</script>

</html>